import os
import logging
from datetime import datetime
import requests
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils import get_server_time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MENU, QUANTITY, PHONE, ADDRESS, CONFIRM = range(5)

# API URL
API_BASE_URL = 'http://localhost:9966/api'

class OrderData:
    def __init__(self):
        self.items = {}  # {dish_id: {'quantity': int, 'name': str, 'price': float}}
        self.customer_name = ""
        self.phone_number = ""
        self.delivery_address = ""
        self.current_dish_id = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –±–ª—é–¥–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
user_orders = {}
# –ö—ç—à –º–µ–Ω—é
menu_cache = {
    'data': None,
    'timestamp': None
}

def get_cached_menu():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—é –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ"""
    current_time = get_server_time()
    
    # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
    if (menu_cache['data'] is None or 
        menu_cache['timestamp'] is None or 
        (current_time - menu_cache['timestamp']).seconds > 300):
        try:
            response = requests.get(
                f'{API_BASE_URL}/menu/today',
                auth=(os.getenv('BOT_USERNAME'), os.getenv('BOT_PASSWORD'))
            )
            if response.status_code == 200:
                menu_cache['data'] = response.json()['menu']
                menu_cache['timestamp'] = current_time
        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching menu: {str(e)}")
            if menu_cache['data'] is None:
                return []
    
    return menu_cache['data']

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup([
        ['/menu üìã'],
        ['/start üè†']
    ], resize_keyboard=True)
    return keyboard

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user = update.effective_user
    name = user.first_name if user.first_name else "–î–æ—Ä–æ–≥–æ–π –≥–æ—Å—Ç—å"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–Ω—é üìã", callback_data="show_menu")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å ‚ùì", callback_data="help"),
         InlineKeyboardButton("–û –Ω–∞—Å ‚ÑπÔ∏è", callback_data="about")]
    ])
    
    welcome_message = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!\n\n"
        "–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã! üéâ\n"
        "–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –±–ª—é–¥–∞, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )
    
    if update.message:
        await update.message.reply_text(
            welcome_message,
            reply_markup=keyboard
        )
    elif update.callback_query:
        await update.callback_query.message.edit_text(
            welcome_message,
            reply_markup=keyboard
        )
    
    return MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    help_text = (
        "üÜò *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "1. –î–ª—è –∑–∞–∫–∞–∑–∞ –µ–¥—ã –Ω–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–Ω—é'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –±–ª—é–¥–∞\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π\n"
        "4. –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7-(989)-132-83-44"
    )
    await update.callback_query.message.edit_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ]])
    )

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û –Ω–∞—Å"""
    about_text = (
        "üçΩ *–í–∫—É—Å–Ω—ã–µ –æ–±–µ–¥—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π!*\n\n"
        "–ú—ã –≥–æ—Ç–æ–≤–∏–º —Å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π, —á—Ç–æ–±—ã –≤–∞—à –æ–±–µ–¥ –±—ã–ª –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏, "
        "–∞ –Ω–∞—Å—Ç–æ—è—â–∏–º –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º! üòä\n\n"
        "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "üïô –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑—ã: –¥–æ 13:00\n"
        "üöö –î–æ—Å—Ç–∞–≤–ª—è–µ–º: —Å 11:00 –¥–æ 14:00\n"
        "üë®‚Äçüç≥ –ù–∞—à–∏ –ø–æ–≤–∞—Ä–∞ –≥–æ—Ç–æ–≤—è—Ç –∏–∑ —Å–≤–µ–∂–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        "‚ô®Ô∏è –î–æ—Å—Ç–∞–≤–ª—è–µ–º –≥–æ—Ä—è—á–∏–º –≤ —É–¥–æ–±–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö\n\n"
        "–ü–æ—Ä–∞–¥—É–π—Ç–µ —Å–µ–±—è –≤–∫—É—Å–Ω—ã–º –¥–æ–º–∞—à–Ω–∏–º –æ–±–µ–¥–æ–º! üéâ"
    )
    await update.callback_query.message.edit_text(
        about_text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ]])
    )

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é"""
    query = update.callback_query
    if query:
        await query.answer()
        message = query.message
    else:
        message = update.message

    try:
        menu_data = get_cached_menu()
        if not menu_data:
            await message.reply_text('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –º–µ–Ω—é –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ.')
            return ConversationHandler.END

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        if user_id not in user_orders:
            user_orders[user_id] = OrderData()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        menu_by_category = {}
        for item in menu_data:
            category = item.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            if category not in menu_by_category:
                menu_by_category[category] = []
            menu_by_category[category].append(item)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        message_text = "üçΩ –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        keyboard = []

        for category, items in menu_by_category.items():
            message_text += f"*{category}*\n"
            for item in items:
                message_text += f"‚Ä¢ {item['name']} - {item['price']}‚ÇΩ\n"
                if user_id in user_orders and item['id'] in user_orders[user_id].items:
                    current_qty = user_orders[user_id].items[item['id']]['quantity']
                    keyboard.append([
                        InlineKeyboardButton("‚ûñ", callback_data=f"dec_{item['id']}"),
                        InlineKeyboardButton(f"{item['name']} - {current_qty} –ø–æ—Ä—Ü.", callback_data=f"info_{item['id']}"),
                        InlineKeyboardButton("‚ûï", callback_data=f"inc_{item['id']}")
                    ])
                else:
                    keyboard.append([
                        InlineKeyboardButton(f"–î–æ–±–∞–≤–∏—Ç—å {item['name']}", callback_data=f"select_{item['id']}")
                    ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
        bottom_buttons = []
        if user_orders[user_id].items:
            bottom_buttons.append(InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
        bottom_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start"))
        keyboard.append(bottom_buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        if user_orders[user_id].items:
            message_text += "\n" + format_order_summary(user_orders[user_id])

        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query:
            await query.message.edit_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
        return MENU

    except Exception as e:
        logger.error(f"Error in show_menu: {str(e)}")
        await message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        return ConversationHandler.END

async def select_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ä—Ü–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    if user_id not in user_orders:
        user_orders[user_id] = OrderData()

    if query.data.startswith(('inc_', 'dec_', 'select_')):
        action, dish_id = query.data.split('_')
        dish_id = int(dish_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ –∏–∑ –∫—ç—à–∞
        menu_data = get_cached_menu()
        dish = next((item for item in menu_data if item['id'] == dish_id), None)
        
        if not dish:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –±–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return MENU

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        if action == 'select':
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ –≤ –∑–∞–∫–∞–∑ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 1
            user_orders[user_id].items[dish_id] = {
                'quantity': 1,
                'name': dish['name'],
                'price': dish['price']
            }
        elif action == 'inc':
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
            if dish_id in user_orders[user_id].items:
                user_orders[user_id].items[dish_id]['quantity'] += 1
        elif action == 'dec':
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1 –∏–ª–∏ —É–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ —Å—Ç–∞–Ω–µ—Ç 0
            if dish_id in user_orders[user_id].items:
                user_orders[user_id].items[dish_id]['quantity'] -= 1
                if user_orders[user_id].items[dish_id]['quantity'] <= 0:
                    del user_orders[user_id].items[dish_id]

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        return await show_menu(update, context)

async def request_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    query = update.callback_query
    if query:
        await query.answer()
    
    user_id = update.effective_user.id
    if not user_orders[user_id].items:
        await update.effective_message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑.")
        return await show_menu(update, context)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
    ], resize_keyboard=True)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞
    message = format_order_summary(user_orders[user_id])
    message += "\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏ –ø–æ –∑–∞–∫–∞–∑—É."
    
    if query:
        await query.message.reply_text(message, reply_markup=keyboard)
    else:
        await update.message.reply_text(message, reply_markup=keyboard)
    return PHONE

async def process_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = update.effective_user.id
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    reply_markup = ReplyKeyboardRemove()
    
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    if user_id not in user_orders:
        user_orders[user_id] = OrderData()
    user_orders[user_id].phone_number = phone

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
        reply_markup=reply_markup
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–¥—Ä–µ—Å–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    context.application.create_task(
        fetch_and_show_addresses(update, context, phone)
    )
    return ADDRESS

async def fetch_and_show_addresses(update, context, phone):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤"""
    try:
        response = requests.get(
            f'{API_BASE_URL}/user/addresses',
            params={'phone': phone},
            auth=(os.getenv('BOT_USERNAME'), os.getenv('BOT_PASSWORD'))
        )
        
        if response.status_code == 200:
            previous_addresses = response.json().get('addresses', [])
            if previous_addresses:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∑–∂–µ
                context.user_data['previous_addresses'] = previous_addresses
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
                keyboard = []
                for addr in previous_addresses:
                    keyboard.append([InlineKeyboardButton(f"üìç {addr}", callback_data=f"addr_{len(keyboard)}")])
                keyboard.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å", callback_data="new_address")])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:",
                    reply_markup=reply_markup
                )
                return

    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching previous addresses: {str(e)}")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å
    await request_address(update, context)

async def request_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    query = update.callback_query
    
    if query:
        await query.answer()
        if query.data.startswith("addr_"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–¥—Ä–µ—Å
            addr_index = int(query.data.split("_")[1])
            previous_addresses = context.user_data.get('previous_addresses', [])
            if 0 <= addr_index < len(previous_addresses):
                user_id = update.effective_user.id
                user_orders[user_id].delivery_address = previous_addresses[addr_index]
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
                await show_order_confirmation(update, context)
                return CONFIRM
            
        elif query.data == "new_address":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
                reply_markup=ReplyKeyboardRemove()
            )
            return ADDRESS
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
    keyboard = ReplyKeyboardRemove()
    message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
    
    if update.message:
        await update.message.reply_text(message, reply_markup=keyboard)
    else:
        await query.message.reply_text(message, reply_markup=keyboard)
    return ADDRESS

async def process_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_id = update.effective_user.id
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º
    if update.message and update.message.text:
        user_orders[user_id].delivery_address = update.message.text
        return await show_order_confirmation(update, context)
    
    return CONFIRM

async def show_order_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_id = update.effective_user.id
    order_data = user_orders[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
    message = "üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n"
    message += format_order_summary(order_data)
    message += f"\n\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {order_data.phone_number}"
    message += f"\nüìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data.delivery_address}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å (–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback query)
    if update.message:
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.callback_query.message.edit_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    return CONFIRM

async def process_order_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = update.effective_user
    
    if query.data == "cancel_order":
        await query.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        del user_orders[user_id]
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_orders[user_id].customer_name = user.username or user.first_name or "–ö–ª–∏–µ–Ω—Ç –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = {
        'customer_name': user_orders[user_id].customer_name,
        'phone_number': user_orders[user_id].phone_number,
        'delivery_address': user_orders[user_id].delivery_address,
        'items': [
            {'dish_id': dish_id, 'quantity': details['quantity']}
            for dish_id, details in user_orders[user_id].items.items()
        ]
    }

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        response = requests.post(
            f'{API_BASE_URL}/orders',
            auth=(os.getenv('BOT_USERNAME'), os.getenv('BOT_PASSWORD')),
            json=order_data
        )

        if response.status_code == 201:
            order_id = response.json()['order_id']
            message = (
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n"
                f"–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {order_id}\n\n"
                f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É {order_data['phone_number']} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n{order_data['delivery_address']}\n\n"
                f"{format_order_summary(user_orders[user_id])}"
            )
            keyboard = [[InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.edit_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            group_message = (
                f"‚úÖ‚úÖ‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}‚úÖ‚úÖ‚úÖ\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {order_data['customer_name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone_number']}\n"
                f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_address']}\n\n"
                f"üìã –ó–∞–∫–∞–∑:\n{format_order_summary(user_orders[user_id])}"
            )
            
            try:
                group_id = os.getenv('TELEGRAM_GROUP_ID')
                logger.info(f"Attempting to send message to group {group_id}")
                await context.bot.send_message(
                    chat_id=group_id,
                    text=group_message,
                    parse_mode='Markdown'
                )
                logger.info("Successfully sent message to group")
            except Exception as e:
                logger.error(f"Failed to send notification to group. Error type: {type(e).__name__}, Error details: {str(e)}")
        else:
            keyboard = [[InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="show_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )
    except requests.exceptions.RequestException:
        keyboard = [[InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="show_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup
        )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    del user_orders[user_id]
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
    user_id = update.effective_user.id
    if user_id in user_orders:
        del user_orders[user_id]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = [[InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="show_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑."
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(
            message,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=reply_markup
        )
    
    return ConversationHandler.END

def format_order_summary(order_data: OrderData) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞"""
    total = 0
    message = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n\n"
    
    if not order_data.items:
        return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    
    for dish_id, details in order_data.items.items():
        subtotal = details['price'] * details['quantity']
        total += subtotal
        message += f"‚Ä¢ {details['name']} - {details['quantity']} –ø–æ—Ä—Ü. = {subtotal}‚ÇΩ\n"
    
    message += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    return message

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    group_id = os.getenv('TELEGRAM_GROUP_ID')
    logger.info(f"Loaded TELEGRAM_GROUP_ID: {group_id}")
    
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CallbackQueryHandler(show_menu, pattern='^show_menu$')
        ],
        states={
            MENU: [
                CallbackQueryHandler(select_quantity, pattern='^select_'),
                CallbackQueryHandler(select_quantity, pattern='^inc_'),
                CallbackQueryHandler(select_quantity, pattern='^dec_'),
                CallbackQueryHandler(request_phone, pattern='^checkout$'),
                CallbackQueryHandler(show_menu, pattern='^show_menu$')
            ],
            PHONE: [
                MessageHandler(filters.CONTACT | filters.Regex(r'^\+7\d{10}$'), process_phone)
            ],
            ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_address),
                CallbackQueryHandler(request_address, pattern='^addr_'),
                CallbackQueryHandler(request_address, pattern='^new_address$'),
                CallbackQueryHandler(show_menu, pattern='^show_menu$')
            ],
            CONFIRM: [
                CallbackQueryHandler(process_order_confirmation, pattern='^confirm_order$'),
                CallbackQueryHandler(cancel, pattern='^cancel_order$'),
                CallbackQueryHandler(show_menu, pattern='^show_menu$')
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ID —á–∞—Ç–∞
    async def log_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f"Message received in chat ID: {update.effective_chat.id}")
        logger.info(f"Chat type: {update.effective_chat.type}")
        return

    application.add_handler(MessageHandler(filters.ALL, log_chat_id))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(start, pattern="^back_to_start$"))
    application.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    application.add_handler(CallbackQueryHandler(about_command, pattern="^about$"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
